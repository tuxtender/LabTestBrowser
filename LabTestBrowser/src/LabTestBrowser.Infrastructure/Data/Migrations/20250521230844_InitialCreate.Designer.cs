// <auto-generated />
using System;
using LabTestBrowser.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LabTestBrowser.Infrastructure.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250521230844_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("LabTestBrowser.Core.CompleteBloodCountAggregate.CompleteBloodCount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ObservationDateTime")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly?>("ReviewDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ReviewResult")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("CompleteBloodCounts");
                });

            modelBuilder.Entity("LabTestBrowser.Core.LabTestReportAggregate.LabTestReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("LabTestReports");
                });

            modelBuilder.Entity("LabTestBrowser.Core.CompleteBloodCountAggregate.CompleteBloodCount", b =>
                {
                    b.OwnsOne("LabTestBrowser.Core.CompleteBloodCountAggregate.AccessionNumber", "AccessionNumber", b1 =>
                        {
                            b1.Property<int>("CompleteBloodCountId")
                                .HasColumnType("INTEGER");

                            b1.Property<DateOnly>("Date")
                                .HasColumnType("TEXT");

                            b1.Property<int>("SequenceNumber")
                                .HasColumnType("INTEGER");

                            b1.HasKey("CompleteBloodCountId");

                            b1.HasIndex("SequenceNumber", "Date")
                                .IsUnique();

                            b1.ToTable("CompleteBloodCounts");

                            b1.WithOwner()
                                .HasForeignKey("CompleteBloodCountId");
                        });

                    b.OwnsOne("LabTestBrowser.Core.CompleteBloodCountAggregate.LabTestResult", "BasophilPercent", b1 =>
                        {
                            b1.Property<int>("CompleteBloodCountId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("CompleteBloodCountId");

                            b1.ToTable("CompleteBloodCounts");

                            b1.WithOwner()
                                .HasForeignKey("CompleteBloodCountId");
                        });

                    b.OwnsOne("LabTestBrowser.Core.CompleteBloodCountAggregate.LabTestResult", "EosinophilPercent", b1 =>
                        {
                            b1.Property<int>("CompleteBloodCountId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("CompleteBloodCountId");

                            b1.ToTable("CompleteBloodCounts");

                            b1.WithOwner()
                                .HasForeignKey("CompleteBloodCountId");
                        });

                    b.OwnsOne("LabTestBrowser.Core.CompleteBloodCountAggregate.LabTestResult", "Hematocrit", b1 =>
                        {
                            b1.Property<int>("CompleteBloodCountId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("CompleteBloodCountId");

                            b1.ToTable("CompleteBloodCounts");

                            b1.WithOwner()
                                .HasForeignKey("CompleteBloodCountId");
                        });

                    b.OwnsOne("LabTestBrowser.Core.CompleteBloodCountAggregate.LabTestResult", "Hemoglobin", b1 =>
                        {
                            b1.Property<int>("CompleteBloodCountId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("CompleteBloodCountId");

                            b1.ToTable("CompleteBloodCounts");

                            b1.WithOwner()
                                .HasForeignKey("CompleteBloodCountId");
                        });

                    b.OwnsOne("LabTestBrowser.Core.CompleteBloodCountAggregate.LabTestResult", "LymphocytePercent", b1 =>
                        {
                            b1.Property<int>("CompleteBloodCountId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("CompleteBloodCountId");

                            b1.ToTable("CompleteBloodCounts");

                            b1.WithOwner()
                                .HasForeignKey("CompleteBloodCountId");
                        });

                    b.OwnsOne("LabTestBrowser.Core.CompleteBloodCountAggregate.LabTestResult", "MeanCorpuscularHemoglobin", b1 =>
                        {
                            b1.Property<int>("CompleteBloodCountId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("CompleteBloodCountId");

                            b1.ToTable("CompleteBloodCounts");

                            b1.WithOwner()
                                .HasForeignKey("CompleteBloodCountId");
                        });

                    b.OwnsOne("LabTestBrowser.Core.CompleteBloodCountAggregate.LabTestResult", "MeanCorpuscularHemoglobinConcentration", b1 =>
                        {
                            b1.Property<int>("CompleteBloodCountId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("CompleteBloodCountId");

                            b1.ToTable("CompleteBloodCounts");

                            b1.WithOwner()
                                .HasForeignKey("CompleteBloodCountId");
                        });

                    b.OwnsOne("LabTestBrowser.Core.CompleteBloodCountAggregate.LabTestResult", "MeanCorpuscularVolume", b1 =>
                        {
                            b1.Property<int>("CompleteBloodCountId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("CompleteBloodCountId");

                            b1.ToTable("CompleteBloodCounts");

                            b1.WithOwner()
                                .HasForeignKey("CompleteBloodCountId");
                        });

                    b.OwnsOne("LabTestBrowser.Core.CompleteBloodCountAggregate.LabTestResult", "MeanPlateletVolume", b1 =>
                        {
                            b1.Property<int>("CompleteBloodCountId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("CompleteBloodCountId");

                            b1.ToTable("CompleteBloodCounts");

                            b1.WithOwner()
                                .HasForeignKey("CompleteBloodCountId");
                        });

                    b.OwnsOne("LabTestBrowser.Core.CompleteBloodCountAggregate.LabTestResult", "MonocytePercent", b1 =>
                        {
                            b1.Property<int>("CompleteBloodCountId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("CompleteBloodCountId");

                            b1.ToTable("CompleteBloodCounts");

                            b1.WithOwner()
                                .HasForeignKey("CompleteBloodCountId");
                        });

                    b.OwnsOne("LabTestBrowser.Core.CompleteBloodCountAggregate.LabTestResult", "NeutrophilPercent", b1 =>
                        {
                            b1.Property<int>("CompleteBloodCountId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("CompleteBloodCountId");

                            b1.ToTable("CompleteBloodCounts");

                            b1.WithOwner()
                                .HasForeignKey("CompleteBloodCountId");
                        });

                    b.OwnsOne("LabTestBrowser.Core.CompleteBloodCountAggregate.LabTestResult", "Platelet", b1 =>
                        {
                            b1.Property<int>("CompleteBloodCountId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("CompleteBloodCountId");

                            b1.ToTable("CompleteBloodCounts");

                            b1.WithOwner()
                                .HasForeignKey("CompleteBloodCountId");
                        });

                    b.OwnsOne("LabTestBrowser.Core.CompleteBloodCountAggregate.LabTestResult", "RedBloodCell", b1 =>
                        {
                            b1.Property<int>("CompleteBloodCountId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("CompleteBloodCountId");

                            b1.ToTable("CompleteBloodCounts");

                            b1.WithOwner()
                                .HasForeignKey("CompleteBloodCountId");
                        });

                    b.OwnsOne("LabTestBrowser.Core.CompleteBloodCountAggregate.LabTestResult", "RedBloodCellDistributionWidth", b1 =>
                        {
                            b1.Property<int>("CompleteBloodCountId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("CompleteBloodCountId");

                            b1.ToTable("CompleteBloodCounts");

                            b1.WithOwner()
                                .HasForeignKey("CompleteBloodCountId");
                        });

                    b.OwnsOne("LabTestBrowser.Core.CompleteBloodCountAggregate.LabTestResult", "WhiteBloodCell", b1 =>
                        {
                            b1.Property<int>("CompleteBloodCountId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("CompleteBloodCountId");

                            b1.ToTable("CompleteBloodCounts");

                            b1.WithOwner()
                                .HasForeignKey("CompleteBloodCountId");
                        });

                    b.Navigation("AccessionNumber");

                    b.Navigation("BasophilPercent");

                    b.Navigation("EosinophilPercent");

                    b.Navigation("Hematocrit");

                    b.Navigation("Hemoglobin");

                    b.Navigation("LymphocytePercent");

                    b.Navigation("MeanCorpuscularHemoglobin");

                    b.Navigation("MeanCorpuscularHemoglobinConcentration");

                    b.Navigation("MeanCorpuscularVolume");

                    b.Navigation("MeanPlateletVolume");

                    b.Navigation("MonocytePercent");

                    b.Navigation("NeutrophilPercent");

                    b.Navigation("Platelet");

                    b.Navigation("RedBloodCell");

                    b.Navigation("RedBloodCellDistributionWidth");

                    b.Navigation("WhiteBloodCell");
                });

            modelBuilder.Entity("LabTestBrowser.Core.LabTestReportAggregate.LabTestReport", b =>
                {
                    b.OwnsOne("LabTestBrowser.Core.CompleteBloodCountAggregate.AccessionNumber", "AccessionNumber", b1 =>
                        {
                            b1.Property<int>("LabTestReportId")
                                .HasColumnType("INTEGER");

                            b1.Property<DateOnly>("Date")
                                .HasColumnType("TEXT");

                            b1.Property<int>("SequenceNumber")
                                .HasColumnType("INTEGER");

                            b1.HasKey("LabTestReportId");

                            b1.ToTable("LabTestReports");

                            b1.WithOwner()
                                .HasForeignKey("LabTestReportId");
                        });

                    b.OwnsOne("LabTestBrowser.Core.LabTestReportAggregate.Patient", "Patient", b1 =>
                        {
                            b1.Property<int>("LabTestReportId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Animal")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("Breed")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Category")
                                .HasColumnType("TEXT");

                            b1.Property<string>("HealthcareProxy")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Name")
                                .HasColumnType("TEXT");

                            b1.HasKey("LabTestReportId");

                            b1.ToTable("LabTestReports");

                            b1.WithOwner()
                                .HasForeignKey("LabTestReportId");

                            b1.OwnsOne("LabTestBrowser.Core.LabTestReportAggregate.Age", "Age", b2 =>
                                {
                                    b2.Property<int>("PatientLabTestReportId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<int?>("Days")
                                        .HasColumnType("INTEGER");

                                    b2.Property<bool>("IsEmpty")
                                        .HasColumnType("INTEGER");

                                    b2.Property<int?>("Months")
                                        .HasColumnType("INTEGER");

                                    b2.Property<int?>("Years")
                                        .HasColumnType("INTEGER");

                                    b2.HasKey("PatientLabTestReportId");

                                    b2.ToTable("LabTestReports");

                                    b2.WithOwner()
                                        .HasForeignKey("PatientLabTestReportId");
                                });

                            b1.Navigation("Age")
                                .IsRequired();
                        });

                    b.OwnsOne("LabTestBrowser.Core.LabTestReportAggregate.SpecimenCollectionCenter", "SpecimenCollectionCenter", b1 =>
                        {
                            b1.Property<int>("LabTestReportId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Facility")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("TradeName")
                                .HasColumnType("TEXT");

                            b1.HasKey("LabTestReportId");

                            b1.ToTable("LabTestReports");

                            b1.WithOwner()
                                .HasForeignKey("LabTestReportId");
                        });

                    b.Navigation("AccessionNumber")
                        .IsRequired();

                    b.Navigation("Patient")
                        .IsRequired();

                    b.Navigation("SpecimenCollectionCenter")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
